/*
Copyright Â© 2023 NAME HERE <EMAIL ADDRESS>
*/

package types

import (
	"fmt"
	"strings"
)

type RiskExploitationImpact int

const (
	LowImpact RiskExploitationImpact = iota
	MediumImpact
	HighImpact
	VeryHighImpact
)

func RiskExploitationImpactValues() []TypeEnum {
	return []TypeEnum{
		LowImpact,
		MediumImpact,
		HighImpact,
		VeryHighImpact,
	}
}

var RiskExploitationImpactTypeDescription = [...]TypeDescription{
	{"low", "Low"},
	{"medium", "Medium"},
	{"high", "High"},
	{"very-high", "Very High"},
}

func ParseRiskExploitationImpact(value string) (riskExploitationImpact RiskExploitationImpact, err error) {
	return RiskExploitationImpact(0).Find(value)
}

func (what RiskExploitationImpact) String() string {
	// NOTE: maintain list also in schema.json for validation in IDEs
	return RiskExploitationImpactTypeDescription[what].Name
}

func (what RiskExploitationImpact) Explain() string {
	return RiskExploitationImpactTypeDescription[what].Description
}

func (what RiskExploitationImpact) Title() string {
	return [...]string{"Low", "Medium", "High", "Very High"}[what]
}

func (what RiskExploitationImpact) Weight() int {
	return [...]int{1, 2, 3, 4}[what]
}

func (what RiskExploitationImpact) Find(value string) (RiskExploitationImpact, error) {
	if len(value) == 0 {
		return MediumImpact, nil
	}

	for index, description := range RiskExploitationImpactTypeDescription {
		if strings.EqualFold(value, description.Name) {
			return RiskExploitationImpact(index), nil
		}
	}

	return RiskExploitationImpact(0), fmt.Errorf("unknown risk exploitation impact value %q", value)
}
